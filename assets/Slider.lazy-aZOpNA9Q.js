var V=Object.defineProperty;var c=(n,e)=>V(n,"name",{value:e,configurable:true});import{c as q}from"./createLazyWrapper-AC75M60Y.js";import{j as g}from"./jsx-runtime-CGXnEs--.js";import{r as l}from"./index-DGnhqvo7.js";import{a as C,b as S}from"./Slider-BJgz8ILe.js";import"./_commonjsHelpers-DRKe4gOT.js";import"./iframe-CGxrJAU3.js";import"../sb-preview/runtime.js";import"./createIsland-fzL0F2Ul.js";import"./Label-DSHguxSj.js";import"./bem-DSWMYwqE.js";import"./validations-DJC0TP_C.js";function o(n){const{value:e,onChange:t,onFocus:u,onBlur:i,min:r=0,max:s=100}=n;const[f,d]=l.useState(()=>{const a=typeof e==="number"?e:typeof e==="string"?Number(e):r;return Math.min(Math.max(a,r),s)});l.useEffect(()=>{if(e!==void 0){const a=typeof e==="number"?e:typeof e==="string"?Number(e):r;d(Math.min(Math.max(a,r),s))}},[e,r,s]);const[b,m]=l.useState(false);const h=l.useCallback(a=>{m(true);u==null?void 0:u(a)},[u]);const y=l.useCallback(a=>{m(false);i==null?void 0:i(a)},[i]);const v=l.useCallback(a=>{const p=Number(a.target.value);d(p);t==null?void 0:t(a,p)},[t]);return g.jsx(C,{...n,internalValue:f,isFocused:b,onBlurInternal:y,onChangeInternal:v,onFocusInternal:h})}c(o,"SliderClient");const x=l.memo(o);try{o.displayName="SliderClient";o.__docgenInfo={"description":"","displayName":"SliderClient","props":{"id":{"defaultValue":null,"description":"Unique identifier (also used for label htmlFor)","name":"id","required":true,"type":{"name":"string"}},"value":{"defaultValue":null,"description":"Current value (controlled)","name":"value","required":false,"type":{"name":"string | number"}},"min":{"defaultValue":null,"description":"Minimum value (default: 0)","name":"min","required":false,"type":{"name":"number"}},"max":{"defaultValue":null,"description":"Maximum value (default: 100)","name":"max","required":false,"type":{"name":"number"}},"step":{"defaultValue":null,"description":"Step increment (default: 1)","name":"step","required":false,"type":{"name":"number"}},"name":{"defaultValue":null,"description":"","name":"name","required":false,"type":{"name":"string"}},"errorText":{"defaultValue":null,"description":"Custom error message","name":"errorText","required":false,"type":{"name":"string"}},"helperText":{"defaultValue":null,"description":"Custom helper message","name":"helperText","required":false,"type":{"name":"string"}},"marks":{"defaultValue":null,"description":"If true, show tick marks at each step (unstyled; view will position them).\nOr supply an array of `{ value, label? }` to render custom marks.","name":"marks","required":false,"type":{"name":"boolean | SliderMark[]"}},"label":{"defaultValue":null,"description":"Label text (renders above the slider)","name":"label","required":false,"type":{"name":"string"}},"hideLabel":{"defaultValue":null,"description":"Hide label","name":"hideLabel","required":false,"type":{"name":"boolean"}},"labelProps":{"defaultValue":null,"description":"Props forwarded to the Label component","name":"labelProps","required":false,"type":{"name":'Omit<LabelProps, "error" | "label" | "required" | "htmlFor">'}},"valueLabelProps":{"defaultValue":null,"description":"Props forwarded to the floating value tooltip <span>","name":"valueLabelProps","required":false,"type":{"name":"HTMLAttributes<HTMLSpanElement>"}},"required":{"defaultValue":null,"description":"If true, renders *— Required —* on the label","name":"required","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":null,"description":"Disable the slider entirely","name":"disabled","required":false,"type":{"name":"boolean"}},"onFocus":{"defaultValue":null,"description":"Called when slider gains focus","name":"onFocus","required":false,"type":{"name":"((e: FocusEvent<HTMLInputElement, Element>) => void)"}},"onBlur":{"defaultValue":null,"description":"Called when slider loses focus","name":"onBlur","required":false,"type":{"name":"((e: FocusEvent<HTMLInputElement, Element>) => void)"}},"onChange":{"defaultValue":null,"description":"Called whenever the value changes.\nSignature: (e: ChangeEvent<HTMLInputElement>, newValue: number) => void","name":"onChange","required":false,"type":{"name":"((e: ChangeEvent<HTMLInputElement>, value: number) => void)"}},"className":{"defaultValue":null,"description":"Optional additional CSS class on the root container","name":"className","required":false,"type":{"name":"string"}}}}}catch(n){}const j=q({name:"Slider",Client:x,Server:S});export{j as default};
