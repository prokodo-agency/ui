var _=Object.defineProperty;var M=(m,t)=>_(m,"name",{value:t,configurable:true});import{c as H}from"./createLazyWrapper-AC75M60Y.js";import{j as N}from"./jsx-runtime-CGXnEs--.js";import{r as n}from"./index-DGnhqvo7.js";import{a as P,b as j}from"./Slider-DWwqy-_A.js";import"./_commonjsHelpers-DRKe4gOT.js";import"./iframe-BTrXp-vY.js";import"../sb-preview/runtime.js";import"./createIsland-fzL0F2Ul.js";import"./Label-BmAeSxLe.js";import"./bem-DSWMYwqE.js";import"./validations-DJC0TP_C.js";function y(m){const{value:t,onChange:p,onFocus:c,onBlur:f,min:l=0,max:i=100,step:s=1,marks:b=false,snap:v="none"}=m;const u=n.useCallback(e=>Math.min(Math.max(e,l),i),[l,i]);const q=n.useMemo(()=>{if(Array.isArray(b)){return[...new Set(b.map(e=>e.value))].filter(e=>typeof e==="number").sort((e,a)=>e-a)}if(b===true){const e=[];if(s>0){for(let a=l;a<=i;a+=s)e.push(+a.toFixed(4));if(e.length===0||e[e.length-1]!==i)e.push(i)}return e}return[]},[b,l,i,s]);const h=n.useCallback(e=>u(s>0?Math.round((e-l)/s)*s+l:e),[u,s,l]);const g=n.useCallback(e=>{const a=u(e);const r=q;if(r.length===0)return h(a);let d=a,k=Infinity;for(const S of r){const x=Math.abs(a-S);if(x<k){d=S;k=x}}return u(d)},[u,q,h]);const o=n.useCallback(e=>{switch(v){case"step":return h(e);case"marks":return g(e);default:return u(e)}},[v,g,h,u]);const w=n.useMemo(()=>{const e=typeof t==="number"?t:typeof t==="string"?Number(t):l;return o(e)},[t,l,o]);const[E,V]=n.useState(w);n.useEffect(()=>{if(t!==void 0){const e=typeof t==="number"?t:typeof t==="string"?Number(t):l;const a=o(e);V(r=>r===a?r:a)}},[t,l,o]);const[L,C]=n.useState(false);const I=n.useCallback(e=>{C(true);c==null?void 0:c(e)},[c]);const T=n.useCallback(e=>{C(false);f==null?void 0:f(e)},[f]);const F=n.useCallback(e=>{const a=Number(e.currentTarget.value);const r=o(a);V(d=>d===r?d:r);p==null?void 0:p(e,r)},[p,o]);return N.jsx(P,{...m,internalValue:E,isFocused:L,onBlurInternal:T,onChangeInternal:F,onFocusInternal:I})}M(y,"SliderClient");const z=n.memo(y);try{y.displayName="SliderClient";y.__docgenInfo={"description":"","displayName":"SliderClient","props":{"id":{"defaultValue":null,"description":"Unique identifier (also used for label htmlFor)","name":"id","required":true,"type":{"name":"string"}},"value":{"defaultValue":null,"description":"Current value (controlled)","name":"value","required":false,"type":{"name":"string | number"}},"min":{"defaultValue":null,"description":"Minimum value (default: 0)","name":"min","required":false,"type":{"name":"number"}},"max":{"defaultValue":null,"description":"Maximum value (default: 100)","name":"max","required":false,"type":{"name":"number"}},"step":{"defaultValue":null,"description":"Step increment (default: 1)","name":"step","required":false,"type":{"name":"number"}},"name":{"defaultValue":null,"description":"","name":"name","required":false,"type":{"name":"string"}},"errorText":{"defaultValue":null,"description":"Custom error message","name":"errorText","required":false,"type":{"name":"string"}},"helperText":{"defaultValue":null,"description":"Custom helper message","name":"helperText","required":false,"type":{"name":"string"}},"marks":{"defaultValue":null,"description":"If true, show tick marks at each step (unstyled; view will position them).\nOr supply an array of `{ value, label? }` to render custom marks.","name":"marks","required":false,"type":{"name":"boolean | SliderMark[]"}},"label":{"defaultValue":null,"description":"Label text (renders above the slider)","name":"label","required":false,"type":{"name":"string"}},"hideLabel":{"defaultValue":null,"description":"Hide label","name":"hideLabel","required":false,"type":{"name":"boolean"}},"labelProps":{"defaultValue":null,"description":"Props forwarded to the Label component","name":"labelProps","required":false,"type":{"name":'Omit<LabelProps, "error" | "label" | "required" | "htmlFor">'}},"valueLabelProps":{"defaultValue":null,"description":"Props forwarded to the floating value tooltip <span>","name":"valueLabelProps","required":false,"type":{"name":"HTMLAttributes<HTMLSpanElement>"}},"required":{"defaultValue":null,"description":"If true, renders *— Required —* on the label","name":"required","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":null,"description":"Disable the slider entirely","name":"disabled","required":false,"type":{"name":"boolean"}},"onFocus":{"defaultValue":null,"description":"Called when slider gains focus","name":"onFocus","required":false,"type":{"name":"((e: FocusEvent<HTMLInputElement, Element>) => void)"}},"onBlur":{"defaultValue":null,"description":"Called when slider loses focus","name":"onBlur","required":false,"type":{"name":"((e: FocusEvent<HTMLInputElement, Element>) => void)"}},"onChange":{"defaultValue":null,"description":"Called whenever the value changes.\nSignature: (e: ChangeEvent<HTMLInputElement>, newValue: number) => void","name":"onChange","required":false,"type":{"name":"((e: ChangeEvent<HTMLInputElement>, value: number) => void)"}},"className":{"defaultValue":null,"description":"Optional additional CSS class on the root container","name":"className","required":false,"type":{"name":"string"}},"snap":{"defaultValue":null,"description":'How the thumb snaps when the user drags it.\n- "none": free value (default)\n- "step": snap to multiples of `step`\n- "marks": snap to nearest mark value (from `marks` array or implicit step marks)',"name":"snap","required":false,"type":{"name":"enum","value":[{"value":'"none"'},{"value":'"step"'},{"value":'"marks"'}]}}}}}catch(m){}const X=H({name:"Slider",Client:z,Server:j});export{X as default};
