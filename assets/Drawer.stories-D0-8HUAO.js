const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./Drawer.effects.module-VJWwQhFr.js","./Drawer.effects-hBnIyhI8.css","./Drawer.lazy-YZnxJ9kY.js","./createLazyWrapper-AC75M60Y.js","./jsx-runtime-CGXnEs--.js","./index-DGnhqvo7.js","./_commonjsHelpers-DRKe4gOT.js","./iframe-BV1xsYLV.js","./createIsland-fzL0F2Ul.js","./bem-DSWMYwqE.js","./validations-DJC0TP_C.js","./Button-Dyj-ZuKe.js","./Link.server-BZ5NjJWg.js","./BaseLink.server-BRG_yKpR.js","./Link-DNvfKUDc.css","./Icon-C3A5VhcE.js","./Icon-DwwgUk_2.css","./Button-Dv5j9Uzy.css","./Headline-BCyK0KL2.js","./AnimatedText-x4M0XoDd.js","./Headline-vNdoE0zu.css"])))=>i.map(i=>d[i]);
var K=Object.defineProperty;var n=(e,a)=>K(e,"name",{value:a,configurable:true});import{j as r}from"./jsx-runtime-CGXnEs--.js";import{r as l}from"./index-DGnhqvo7.js";import{_ as P}from"./iframe-BV1xsYLV.js";import{c as U}from"./createIsland-fzL0F2Ul.js";import{c as W}from"./bem-DSWMYwqE.js";import{a as y}from"./validations-DJC0TP_C.js";import{B as c}from"./Button-Dyj-ZuKe.js";import{H as X}from"./Headline-BCyK0KL2.js";const $="DrawerSlideInLeft";const G="DrawerSlideOutLeft";const Q="DrawerSlideInRight";const Y="DrawerSlideOutRight";const Z="DrawerSlideInTop";const ee="DrawerSlideOutTop";const re="DrawerSlideInBottom";const ne="DrawerSlideOutBottom";const oe={"prokodo-Drawer":"prokodo-Drawer","prokodo-Drawer__backdrop":"prokodo-Drawer__backdrop","prokodo-Drawer__backdrop--open":"prokodo-Drawer__backdrop--open","prokodo-Drawer__container":"prokodo-Drawer__container","prokodo-Drawer__container--open":"prokodo-Drawer__container--open","prokodo-Drawer__container--fullscreen":"prokodo-Drawer__container--fullscreen","prokodo-Drawer__container--anchor-left":"prokodo-Drawer__container--anchor-left","prokodo-Drawer__container--anchor-left--open":"prokodo-Drawer__container--anchor-left--open",DrawerSlideInLeft:$,DrawerSlideOutLeft:G,"prokodo-Drawer__container--anchor-right":"prokodo-Drawer__container--anchor-right","prokodo-Drawer__container--anchor-right--open":"prokodo-Drawer__container--anchor-right--open",DrawerSlideInRight:Q,DrawerSlideOutRight:Y,"prokodo-Drawer__container--anchor-top":"prokodo-Drawer__container--anchor-top","prokodo-Drawer__container--anchor-top--open":"prokodo-Drawer__container--anchor-top--open",DrawerSlideInTop:Z,DrawerSlideOutTop:ee,"prokodo-Drawer__container--anchor-bottom":"prokodo-Drawer__container--anchor-bottom","prokodo-Drawer__container--anchor-bottom--open":"prokodo-Drawer__container--anchor-bottom--open",DrawerSlideInBottom:re,DrawerSlideOutBottom:ne,"prokodo-Drawer__header":"prokodo-Drawer__header","prokodo-Drawer__content":"prokodo-Drawer__content"};function _({useSlide:e}){l.useEffect(()=>{if(Boolean(e)){void P(()=>import("./Drawer.effects.module-VJWwQhFr.js"),true?__vite__mapDeps([0,1]):void 0,import.meta.url)}},[e]);return null}n(_,"DrawerEffectsLoader");try{_.displayName="DrawerEffectsLoader";_.__docgenInfo={"description":"","displayName":"DrawerEffectsLoader","props":{"useSlide":{"defaultValue":null,"description":"enable slide in/out keyframes","name":"useSlide","required":false,"type":{"name":"boolean"}}}}}catch(e){}const m=W(oe,"Drawer");const g=n(({open:e,title:a,titleProps:o,anchor:s="left",fullscreen:d=false,renderHeader:i,closeButtonRef:t,closeButtonProps:H,containerRef:L,className:F,containerClassName:A,children:M,onClose:w,backdropProps:z,...J})=>{const D=Boolean(e);return r.jsxs("div",{className:m("backdrop",{open:D}),...z,children:[r.jsx(_,{useSlide:true}),r.jsxs("div",{ref:L,"aria-labelledby":y(a)?"drawer-title":void 0,"aria-modal":"true",role:"dialog",className:m("container",{open:D,[`anchor-${s}`]:true,[`anchor-${s}--open`]:D,fullscreen:d},A),...J,children:[i?i():r.jsxs("div",{className:m("header"),children:[y(a)&&r.jsx(X,{size:"md",...o,id:"drawer-title",children:a}),r.jsx(c,{"aria-label":"Close drawer",iconProps:{name:"Cancel01Icon",size:"sm"},variant:"text",...H,ref:t,onClick:n(()=>w==null?void 0:w("escapeKeyDown"),"onClick")})]}),r.jsx("div",{className:m("content",void 0,F),children:M})]})]})},"DrawerView");try{g.displayName="DrawerView";g.__docgenInfo={"description":"","displayName":"DrawerView","props":{"open":{"defaultValue":null,"description":"If true, initial drawer is open.","name":"open","required":false,"type":{"name":"boolean"}},"onClose":{"defaultValue":null,"description":"","name":"onClose","required":false,"type":{"name":'((reason: "backdropClick" | "escapeKeyDown") => void)'}},"closeButtonRef":{"defaultValue":null,"description":"","name":"closeButtonRef","required":false,"type":{"name":"RefObject<HTMLButtonElement | null>"}},"containerRef":{"defaultValue":null,"description":"","name":"containerRef","required":false,"type":{"name":"RefObject<HTMLDivElement | null>"}},"backdropProps":{"defaultValue":null,"description":"","name":"backdropProps","required":false,"type":{"name":"HTMLAttributes<HTMLDivElement>"}},"onMouseDown":{"defaultValue":null,"description":"","name":"onMouseDown","required":false,"type":{"name":"MouseEventHandler<HTMLDivElement>"}},"ref":{"defaultValue":null,"description":"Imperative ref to open/close.","name":"ref","required":false,"type":{"name":"Ref<DrawerRef>"}},"title":{"defaultValue":null,"description":"A heading/title for the drawer (optional).\nIf provided, View will render it with an <h2> via Headline.","name":"title","required":false,"type":{"name":"string"}},"titleProps":{"defaultValue":null,"description":"","name":"titleProps","required":false,"type":{"name":"HeadlineProps"}},"fullscreen":{"defaultValue":{value:"false"},"description":"If true, drawer takes full screen (height or width depending on anchor).","name":"fullscreen","required":false,"type":{"name":"boolean"}},"anchor":{"defaultValue":{value:"left"},"description":'Which edge to anchor the drawer on.\nDefaults to "left".',"name":"anchor","required":false,"type":{"name":"enum","value":[{"value":'"left"'},{"value":'"right"'},{"value":'"top"'},{"value":'"bottom"'}]}},"closeOnBackdropClick":{"defaultValue":null,"description":"Control whether clicking on the backdrop closes the drawer.\nDefaults to true.","name":"closeOnBackdropClick","required":false,"type":{"name":"boolean"}},"closeButtonProps":{"defaultValue":null,"description":"Option overwrittes for the close button","name":"closeButtonProps","required":false,"type":{"name":"ButtonProps"}},"onChange":{"defaultValue":null,"description":"Callback when open‐state changes. Receives (event, reason).","name":"onChange","required":false,"type":{"name":"((event: unknown, reason: DrawerChangeReason) => void)"}},"renderHeader":{"defaultValue":null,"description":"Optional custom header component. If omitted, View renders a simple\nH2 + close‐button if `title` is provided.","name":"renderHeader","required":false,"type":{"name":"(() => ReactNode)"}},"className":{"defaultValue":null,"description":"Extra CSS class for the outermost <div> (backdrop + wrapper).","name":"className","required":false,"type":{"name":"string"}},"containerClassName":{"defaultValue":null,"description":"Extra CSS class for the inner container (sliding panel).","name":"containerClassName","required":false,"type":{"name":"string"}},"children":{"defaultValue":null,"description":"Anything you want rendered inside the drawer body.","name":"children","required":false,"type":{"name":"ReactNode"}}}}}catch(e){}function ae(e){return r.jsx(g,{...e})}n(ae,"DrawerServer");try{Drawerserver.displayName="Drawerserver";Drawerserver.__docgenInfo={"description":"RSC entry: purely static server render.\nIt will render exactly the same markup (backdrop + container),\nbut no interactive logic (focus‐trap, key events).","displayName":"Drawerserver","props":{"ref":{"defaultValue":null,"description":"Imperative ref to open/close.","name":"ref","required":false,"type":{"name":"Ref<DrawerRef>"}},"open":{"defaultValue":null,"description":"If true, initial drawer is open.","name":"open","required":false,"type":{"name":"boolean"}},"title":{"defaultValue":null,"description":"A heading/title for the drawer (optional).\nIf provided, View will render it with an <h2> via Headline.","name":"title","required":false,"type":{"name":"string"}},"titleProps":{"defaultValue":null,"description":"","name":"titleProps","required":false,"type":{"name":"HeadlineProps"}},"fullscreen":{"defaultValue":null,"description":"If true, drawer takes full screen (height or width depending on anchor).","name":"fullscreen","required":false,"type":{"name":"boolean"}},"anchor":{"defaultValue":null,"description":'Which edge to anchor the drawer on.\nDefaults to "left".',"name":"anchor","required":false,"type":{"name":"enum","value":[{"value":'"left"'},{"value":'"right"'},{"value":'"top"'},{"value":'"bottom"'}]}},"closeOnBackdropClick":{"defaultValue":null,"description":"Control whether clicking on the backdrop closes the drawer.\nDefaults to true.","name":"closeOnBackdropClick","required":false,"type":{"name":"boolean"}},"closeButtonProps":{"defaultValue":null,"description":"Option overwrittes for the close button","name":"closeButtonProps","required":false,"type":{"name":"ButtonProps"}},"onChange":{"defaultValue":null,"description":"Callback when open‐state changes. Receives (event, reason).","name":"onChange","required":false,"type":{"name":"((event: unknown, reason: DrawerChangeReason) => void)"}},"renderHeader":{"defaultValue":null,"description":"Optional custom header component. If omitted, View renders a simple\nH2 + close‐button if `title` is provided.","name":"renderHeader","required":false,"type":{"name":"(() => ReactNode)"}},"className":{"defaultValue":null,"description":"Extra CSS class for the outermost <div> (backdrop + wrapper).","name":"className","required":false,"type":{"name":"string"}},"containerClassName":{"defaultValue":null,"description":"Extra CSS class for the inner container (sliding panel).","name":"containerClassName","required":false,"type":{"name":"string"}},"children":{"defaultValue":null,"description":"Anything you want rendered inside the drawer body.","name":"children","required":false,"type":{"name":"ReactNode"}}}}}catch(e){}const h=U({name:"Drawer",Server:ae,loadLazy:n(()=>P(()=>import("./Drawer.lazy-YZnxJ9kY.js"),true?__vite__mapDeps([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]):void 0,import.meta.url),"loadLazy")});try{h.displayName="Drawer";h.__docgenInfo={"description":"The “Island” entrypoint.  Consumers import this file:\n\n   import { Drawer } from '@/components/drawer'\n\nand use <Drawer open={...} ...>...</Drawer> in their JSX.","displayName":"Drawer","props":{}}}catch(e){}try{ComponentType.displayName="ComponentType";ComponentType.__docgenInfo={"description":"Represents any user-defined component, either as a function or a class.\n\nSimilar to {@link JSXElementConstructor}, but with extra properties like\n{@link FunctionComponent.defaultProps defaultProps }.","displayName":"ComponentType","props":{}}}catch(e){}const te={title:"prokodo/common/Drawer",component:h,parameters:{layout:"fullscreen"},tags:["autodocs"],argTypes:{anchor:{control:{type:"inline-radio"},options:["left","right","top","bottom"],defaultValue:"left"},fullscreen:{control:"boolean",defaultValue:false},closeOnBackdropClick:{control:"boolean",defaultValue:true},onChange:{action:"onChange"},open:{control:"boolean"},containerClassName:{control:"text"},className:{control:"text"},renderHeader:{table:{disable:true}},children:{table:{disable:true}}}};const k=n(e=>r.jsx("div",{style:{position:"absolute",left:"50%",top:"50%",transform:"translate(-50%, -50%)"},children:e}),"renderContainer");const le=n(e=>{const[a,o]=l.useState(Boolean(e.open));l.useEffect(()=>{o(Boolean(e.open))},[e.open]);const s=n((d,i)=>{var t;o(false);(t=e.onChange)==null?void 0:t.call(e,d,i)},"handleChange");return r.jsxs(l.Fragment,{children:[k(r.jsx(c,{title:"Open Drawer",onClick:n(()=>o(true),"onClick")})),r.jsx(h,{...e,open:a,onChange:s,children:r.jsxs("div",{style:{padding:"1rem"},children:[r.jsx("h3",{children:"Drawer Content"}),r.jsxs("p",{children:["Adjust ",r.jsx("strong",{children:"Anchor"})," and ",r.jsx("strong",{children:"Fullscreen"})," in the controls to see different behaviors."]}),r.jsx(c,{title:"Close Drawer",onClick:n(()=>o(false),"onClick")})]})})]})},"DrawerControlled");const p={args:{open:false,anchor:"left",fullscreen:false,closeOnBackdropClick:true},render:n(e=>r.jsx(le,{...e}),"render")};const u={args:{open:true,anchor:"top",fullscreen:true,closeOnBackdropClick:true},render:n(e=>{const[a,o]=l.useState(Boolean(e.open));l.useEffect(()=>{o(Boolean(e.open))},[e.open]);const s=n((d,i)=>{var t;o(false);(t=e.onChange)==null?void 0:t.call(e,d,i)},"handleChange");return r.jsxs(l.Fragment,{children:[k(r.jsx(c,{title:"Toggle Fullscreen Top Drawer",onClick:n(()=>o(true),"onClick")})),r.jsx(h,{...e,anchor:"top",fullscreen:true,open:a,onChange:s,children:r.jsxs("div",{style:{padding:"2rem"},children:[r.jsx("h2",{children:"Fullscreen Top Drawer"}),r.jsxs("p",{children:["This drawer is ",r.jsx("code",{children:"fullscreen"})," and anchored at"," ",r.jsx("code",{children:"top"}),"."]}),r.jsx(c,{title:"Close",onClick:n(()=>o(false),"onClick")})]})})]})},"render")};const f={args:{open:false,anchor:"right",fullscreen:false,closeOnBackdropClick:false},render:n(e=>{const[a,o]=l.useState(Boolean(e.open));l.useEffect(()=>{o(Boolean(e.open))},[e.open]);const s=n((d,i)=>{var t;o(false);(t=e.onChange)==null?void 0:t.call(e,d,i)},"handleChange");return r.jsxs(l.Fragment,{children:[k(r.jsx(c,{title:"Open Right Drawer",onClick:n(()=>o(true),"onClick")})),r.jsx(h,{...e,anchor:"right",closeOnBackdropClick:false,fullscreen:false,open:a,onChange:s,children:r.jsxs("div",{style:{padding:"1rem"},children:[r.jsx("h3",{children:"Right Drawer (Backdrop Disabled)"}),r.jsx("p",{children:"Use the header “×” or the button below to close."}),r.jsx(c,{title:"Close",onClick:n(()=>o(false),"onClick")})]})})]})},"render")};var C,b,v,O,S;p.parameters={...p.parameters,docs:{...(C=p.parameters)==null?void 0:C.docs,source:{originalSource:"{\n  args: {\n    open: false,\n    anchor: 'left',\n    fullscreen: false,\n    closeOnBackdropClick: true\n  },\n  render: args => <DrawerControlled {...args} />\n}",...(v=(b=p.parameters)==null?void 0:b.docs)==null?void 0:v.source},description:{story:"1) Default: left, non-fullscreen, backdrop closes",...(S=(O=p.parameters)==null?void 0:O.docs)==null?void 0:S.description}}};var B,x,I,V,j;u.parameters={...u.parameters,docs:{...(B=u.parameters)==null?void 0:B.docs,source:{originalSource:`{
  args: {
    open: true,
    anchor: 'top',
    fullscreen: true,
    closeOnBackdropClick: true
  },
  render: args => {
    const [isOpen, setIsOpen] = useState<boolean>(Boolean(args.open));
    useEffect(() => {
      setIsOpen(Boolean(args.open));
    }, [args.open]);
    const handleChange = (e: unknown, reason: DrawerChangeReason) => {
      setIsOpen(false);
      args.onChange?.(e, reason);
    };
    return <Fragment>
        {renderContainer(<Button title="Toggle Fullscreen Top Drawer" onClick={() => setIsOpen(true)} />)}
        <Drawer {...args} anchor="top" fullscreen open={isOpen} onChange={handleChange}>
          <div style={{
          padding: '2rem'
        }}>
            <h2>Fullscreen Top Drawer</h2>
            <p>
              This drawer is <code>fullscreen</code> and anchored at{' '}
              <code>top</code>.
            </p>
            <Button title="Close" onClick={() => setIsOpen(false)} />
          </div>
        </Drawer>
      </Fragment>;
  }
}`,...(I=(x=u.parameters)==null?void 0:x.docs)==null?void 0:I.source},description:{story:"2) FullscreenTop: fullscreen from top",...(j=(V=u.parameters)==null?void 0:V.docs)==null?void 0:j.description}}};var R,q,T,N,E;f.parameters={...f.parameters,docs:{...(R=f.parameters)==null?void 0:R.docs,source:{originalSource:`{
  args: {
    open: false,
    anchor: 'right',
    fullscreen: false,
    closeOnBackdropClick: false
  },
  render: args => {
    const [isOpen, setIsOpen] = useState<boolean>(Boolean(args.open));
    useEffect(() => {
      setIsOpen(Boolean(args.open));
    }, [args.open]);
    const handleChange = (e: unknown, reason: DrawerChangeReason) => {
      setIsOpen(false);
      args.onChange?.(e, reason);
    };
    return <Fragment>
        {renderContainer(<Button title="Open Right Drawer" onClick={() => setIsOpen(true)} />)}
        <Drawer {...args} anchor="right" closeOnBackdropClick={false} fullscreen={false} open={isOpen} onChange={handleChange}>
          <div style={{
          padding: '1rem'
        }}>
            <h3>Right Drawer (Backdrop Disabled)</h3>
            <p>Use the header “×” or the button below to close.</p>
            <Button title="Close" onClick={() => setIsOpen(false)} />
          </div>
        </Drawer>
      </Fragment>;
  }
}`,...(T=(q=f.parameters)==null?void 0:q.docs)==null?void 0:T.source},description:{story:"3) Right, non-fullscreen, backdrop disabled",...(E=(N=f.parameters)==null?void 0:N.docs)==null?void 0:E.description}}};const se=["Default","FullscreenTop","RightDisabledBackdrop"];const De=Object.freeze(Object.defineProperty({__proto__:null,Default:p,FullscreenTop:u,RightDisabledBackdrop:f,__namedExportsOrder:se,default:te},Symbol.toStringTag,{value:"Module"}));export{g as D,ae as a,De as b};
