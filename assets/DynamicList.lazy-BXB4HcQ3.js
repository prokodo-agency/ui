var L=Object.defineProperty;var x=(t,u)=>L(t,"name",{value:u,configurable:true});import{c as b}from"./createLazyWrapper-AC75M60Y.js";import{j as w}from"./jsx-runtime-CGXnEs--.js";import{r as o}from"./index-DGnhqvo7.js";import{a as C}from"./validations-DJC0TP_C.js";import{a as _,b as h}from"./DynamicList-BJpQTAg_.js";import"./_commonjsHelpers-DRKe4gOT.js";import"./iframe-CGxrJAU3.js";import"../sb-preview/runtime.js";import"./createIsland-fzL0F2Ul.js";import"./bem-DSWMYwqE.js";import"./Input-BZTNBMML.js";import"./Input.view-6iX6YDuM.js";import"./Label-DSHguxSj.js";import"./Button-D8RlPxHF.js";import"./Link.server-C2t1a3dU.js";import"./BaseLink.server-DMYJ-8yf.js";import"./Icon-DjNAsH3U.js";function y({fields:t,value:u,onChange:e,buttonAddProps:n,buttonDeleteProps:l,...q}){const p=t.length===1;const[s,f]=o.useState(()=>u??[]);o.useEffect(()=>{if(u!==void 0){f(u)}},[u]);const g=o.useCallback(m=>{const a=m.target;const r=Number(a.dataset.index);const i=a.dataset.field;const{value:c}=a;if(Number.isNaN(r)||!C(i))return;const d=s.map((v,k)=>{if(k!==r)return v;return p?c:{...v,[i]:c}});f(d);e==null?void 0:e(d)},[s,e,p]);const V=o.useCallback(m=>{var i;const a=p?"":t.reduce((c,d)=>{c[d.name]="";return c},{});const r=[...s,a];f(r);(i=n==null?void 0:n.onClick)==null?void 0:i.call(n,m);e==null?void 0:e(r)},[s,e,p,t,n]);const N=o.useCallback(m=>{var i;const a=Number(m.currentTarget.dataset.index);if(Number.isNaN(a))return;const r=s.filter((c,d)=>d!==a);f(r);(i=l==null?void 0:l.onClick)==null?void 0:i.call(l,m,a);e==null?void 0:e(r)},[s,e,l]);return w.jsx(_,{...q,fields:t,value:s,buttonAddProps:{...n,onClick:V},buttonDeleteProps:{...l,onClick:N},fieldProps:{onChange:g}})}x(y,"DynamicListClient");const S=o.memo(y);try{y.displayName="DynamicListClient";y.__docgenInfo={"description":"","displayName":"DynamicListClient","props":{"id":{"defaultValue":null,"description":"","name":"id","required":false,"type":{"name":"string"}},"name":{"defaultValue":null,"description":'Prefix used for each input’s `name` attribute, e.g. `"pages"` → `pages[0].name`',"name":"name","required":true,"type":{"name":"string"}},"className":{"defaultValue":null,"description":"Optional wrapper CSS class","name":"className","required":false,"type":{"name":"string"}},"classNameList":{"defaultValue":null,"description":"Optional CSS class for each row container","name":"classNameList","required":false,"type":{"name":"string"}},"buttonAddProps":{"defaultValue":null,"description":"Props forwarded to the “Add” button","name":"buttonAddProps","required":false,"type":{"name":"ButtonProps"}},"buttonDeleteProps":{"defaultValue":null,"description":"Props forwarded to each “Delete” button.\nThe `onClick` handler receives the mouse event and the row index.","name":"buttonDeleteProps","required":false,"type":{"name":'(Omit<ButtonProps, "onClick"> & { onClick?: ((e: MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void); })'}},"disabled":{"defaultValue":null,"description":"","name":"disabled","required":false,"type":{"name":"boolean"}},"label":{"defaultValue":null,"description":"","name":"label","required":false,"type":{"name":"string"}},"labelProps":{"defaultValue":null,"description":"","name":"labelProps","required":false,"type":{"name":'Omit<LabelProps, "error" | "label" | "required" | "htmlFor">'}},"required":{"defaultValue":null,"description":"","name":"required","required":false,"type":{"name":"boolean"}},"errorText":{"defaultValue":null,"description":"","name":"errorText","required":false,"type":{"name":"string"}},"helperText":{"defaultValue":null,"description":"","name":"helperText","required":false,"type":{"name":"string"}},"fields":{"defaultValue":null,"description":"Exactly one field definition\nTwo or more field definitions","name":"fields","required":true,"type":{"name":"[InputProps] | InputProps[]"}},"value":{"defaultValue":null,"description":"Current values (one string per row)\nCurrent values: one object per row, mapping fieldName → string","name":"value","required":false,"type":{"name":"string[] | Record<string, string>[]"}},"onChange":{"defaultValue":null,"description":"Callback when the array of values changes\nCallback when the array of objects changes","name":"onChange","required":false,"type":{"name":"((value: string[]) => void) | ((value: Record<string, string>[]) => void)"}}}}}catch(t){}const U=b({name:"DynamicList",Client:S,Server:h});export{U as default};
