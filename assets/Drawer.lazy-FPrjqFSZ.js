var y=Object.defineProperty;var o=(n,p)=>y(n,"name",{value:p,configurable:true});import{c as _}from"./createLazyWrapper-D1NyvZjw.js";import{j as k}from"./jsx-runtime-CGXnEs--.js";import{r as e}from"./index-DGnhqvo7.js";import{D as v,a as g}from"./Drawer.stories-BEdgOLjW.js";import"./_commonjsHelpers-DRKe4gOT.js";import"./iframe-qNiEo5kq.js";import"../sb-preview/runtime.js";import"./createIsland-CYXQRK9I.js";import"./bem-DSWMYwqE.js";import"./validations-hwxYw-LN.js";import"./Button-Bihifq67.js";import"./Link.server-C7haGjkb.js";import"./BaseLink.server-BHNNn_tQ.js";import"./Icon-BeTZfZnx.js";import"./Headline-CcgObHpS.js";import"./AnimatedText-Dg5OpCOa.js";function c({open:n=false,closeOnBackdropClick:p=true,onChange:s,...d},f){const l=e.useRef(null);const u=e.useRef(null);const D=e.useRef(null);const[a,w]=e.useState(()=>n);const m=e.useCallback(()=>{l.current=document.activeElement;w(true)},[]);const t=e.useCallback(r=>{var i;w(false);s==null?void 0:s({},r??"backdropClick");(i=l.current)==null?void 0:i.focus()},[s]);e.useImperativeHandle(f,()=>({openDrawer:m,closeDrawer:t}),[m,t]);e.useEffect(()=>{var r;if(a){(r=u.current)==null?void 0:r.focus()}},[a]);e.useEffect(()=>{if(!a)return;const r=o(i=>{if(i.key==="Escape"){i.preventDefault();t("escapeKeyDown")}},"handleKey");window.addEventListener("keydown",r);return()=>{window.removeEventListener("keydown",r)}},[a,t]);return k.jsx(v,{...d,closeButtonRef:u,containerRef:D,open:a,backdropProps:{onMouseDown:o(()=>{if(a&&p){t==null?void 0:t("backdropClick")}},"onMouseDown")},onClose:t,onMouseDown:o(r=>r.stopPropagation(),"onMouseDown")})}o(c,"DrawerClient");const C=e.forwardRef(c);try{c.displayName="DrawerClient";c.__docgenInfo={"description":"Client‐side wrapper around DrawerView.\nManages:\n- mounting/unmounting (so we can animate open/close)\n- focus management (trap  restore focus to trigger)\n- ESC‐key handler\n- clicking outside (handled in DrawerView)","displayName":"DrawerClient","props":{}}}catch(n){}const B=_({name:"Drawer",Client:C,Server:g,isInteractive:o(()=>true,"isInteractive")});try{Drawerlazy.displayName="Drawerlazy";Drawerlazy.__docgenInfo={"description":"We wrap DrawerClient/DrawerServer in a LazyWrapper,\nso that on the server we render <DrawerServer>, but\non the client we hydrate into <DrawerClient>.","displayName":"Drawerlazy","props":{}}}catch(n){}export{B as default};
