const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./Drawer.lazy-C_ACV_2j.js","./createLazyWrapper-AC75M60Y.js","./jsx-runtime-CGXnEs--.js","./index-DGnhqvo7.js","./_commonjsHelpers-DRKe4gOT.js","./iframe-DRVrrpfy.js","./createIsland-fzL0F2Ul.js","./bem-DSWMYwqE.js","./validations-hwxYw-LN.js","./Button-BzJ3hXkb.js","./Link.server-jBGsbMZ1.js","./BaseLink.server-DBk24ESO.js","./Link-DNvfKUDc.css","./Icon-PVOdNuED.js","./Icon-DwwgUk_2.css","./Button-D3PV1XbZ.css","./Headline-D7h9gw8y.js","./AnimatedText-Dq31sNPj.js","./Headline-zs6jcnCr.css"])))=>i.map(i=>d[i]);
var U=Object.defineProperty;var a=(e,l)=>U(e,"name",{value:l,configurable:true});import{j as r}from"./jsx-runtime-CGXnEs--.js";import{r as c}from"./index-DGnhqvo7.js";import{_ as $}from"./iframe-DRVrrpfy.js";import{c as J}from"./createIsland-fzL0F2Ul.js";import{c as W}from"./bem-DSWMYwqE.js";import{i as b}from"./validations-hwxYw-LN.js";import{B as f}from"./Button-BzJ3hXkb.js";import{H as X}from"./Headline-D7h9gw8y.js";const Y={"prokodo-Drawer":"prokodo-Drawer","prokodo-Drawer__backdrop":"prokodo-Drawer__backdrop","prokodo-Drawer__backdrop--open":"prokodo-Drawer__backdrop--open","prokodo-Drawer__container":"prokodo-Drawer__container","prokodo-Drawer__container--open":"prokodo-Drawer__container--open","prokodo-Drawer__container--fullscreen":"prokodo-Drawer__container--fullscreen","prokodo-Drawer__container--anchor-left":"prokodo-Drawer__container--anchor-left","prokodo-Drawer__container--anchor-left--open":"prokodo-Drawer__container--anchor-left--open","prokodo-Drawer__container--anchor-right":"prokodo-Drawer__container--anchor-right","prokodo-Drawer__container--anchor-right--open":"prokodo-Drawer__container--anchor-right--open","prokodo-Drawer__container--anchor-top":"prokodo-Drawer__container--anchor-top","prokodo-Drawer__container--anchor-top--open":"prokodo-Drawer__container--anchor-top--open","prokodo-Drawer__container--anchor-bottom":"prokodo-Drawer__container--anchor-bottom","prokodo-Drawer__container--anchor-bottom--open":"prokodo-Drawer__container--anchor-bottom--open","prokodo-Drawer__header":"prokodo-Drawer__header","prokodo-Drawer__content":"prokodo-Drawer__content"};const V='a[href], area[href], button:not([disabled]), input:not([disabled]):not([type=hidden]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex="-1"])';const C=a(({isOpen:e,containerRef:l,closeButtonRef:t,onClose:i})=>{const p=c.useRef(null);c.useEffect(()=>{if(!e)return;const{body:n,documentElement:o}=document;const{scrollY:s}=window;const d={overflow:n.style.overflow,position:n.style.position,top:n.style.top,width:n.style.width,overscroll:o.style.overscrollBehavior};n.style.overflow="hidden";n.style.position="fixed";n.style.top=`-${s}px`;n.style.width="100%";o.style.overscrollBehavior="none";return()=>{n.style.overflow=d.overflow;n.style.position=d.position;n.style.top=d.top;n.style.width=d.width;o.style.overscrollBehavior=d.overscroll;window.scrollTo(0,s)}},[e]);c.useEffect(()=>{var o,s;const n=l==null?void 0:l.current;if(!n)return;if(e){p.current=document.activeElement??null;if(!n.hasAttribute("tabindex"))n.setAttribute("tabindex","-1");const d=(t==null?void 0:t.current)??n.querySelector(V)??n;d.focus({preventScroll:true})}else{(s=(o=p.current)==null?void 0:o.focus)==null?void 0:s.call(o)}},[e,l,t]);c.useEffect(()=>{if(!e)return;const n=l==null?void 0:l.current;if(!n)return;const o=a(s=>{if(s.key==="Escape"){s.stopPropagation();i==null?void 0:i("escapeKeyDown");return}if(s.key!=="Tab")return;const d=Array.from(n.querySelectorAll(V)).filter(g=>!Boolean(g.hasAttribute("inert"))&&!b(g.getAttribute("aria-hidden")));const[_]=d;const k=d.at(-1);if(!_||!k)return;if(s.shiftKey&&document.activeElement===_){s.preventDefault();k.focus()}else if(!s.shiftKey&&document.activeElement===k){s.preventDefault();_.focus()}},"onKeydown");document.addEventListener("keydown",o,true);return()=>document.removeEventListener("keydown",o,true)},[e,l,i]);return null},"DrawerEffectsLoader");try{C.displayName="DrawerEffectsLoader";C.__docgenInfo={"description":"","displayName":"DrawerEffectsLoader","props":{"isOpen":{"defaultValue":null,"description":"","name":"isOpen","required":true,"type":{"name":"boolean"}},"containerRef":{"defaultValue":null,"description":"","name":"containerRef","required":false,"type":{"name":"RefObject<HTMLDivElement | null>"}},"closeButtonRef":{"defaultValue":null,"description":"","name":"closeButtonRef","required":false,"type":{"name":"RefObject<HTMLButtonElement | null>"}},"onClose":{"defaultValue":null,"description":"","name":"onClose","required":false,"type":{"name":'((reason: "backdropClick" | "escapeKeyDown") => void)'}},"useSlide":{"defaultValue":null,"description":"","name":"useSlide","required":false,"type":{"name":"boolean"}}}}}catch(e){}const v=W(Y,"Drawer");const x=a(({open:e,title:l,titleProps:t,anchor:i="left",fullscreen:p=false,renderHeader:n,closeButtonRef:o,closeButtonProps:s,containerRef:d,className:_,containerClassName:k,children:g,onClose:D,backdropProps:K,...z})=>{const u=Boolean(e);return r.jsxs("div",{"aria-hidden":u?void 0:true,className:v("backdrop",{open:u}),...K,children:[r.jsx(C,{useSlide:true,closeButtonRef:o,containerRef:d,isOpen:u,onClose:D}),r.jsxs("div",{ref:d,"aria-labelledby":b(l)?"drawer-title":void 0,role:"dialog",...u?{"aria-modal":"true"}:{"aria-hidden":"true",inert:true},"aria-modal":u?"true":void 0,className:v("container",{open:u,[`anchor-${i}`]:true,[`anchor-${i}--open`]:u,fullscreen:p},k),...z,children:[n?n():r.jsxs("div",{className:v("header"),children:[b(l)&&r.jsx(X,{size:"md",...t,id:"drawer-title",children:l}),r.jsx(f,{"aria-label":"Close drawer",iconProps:{name:"Cancel01Icon",size:"sm"},variant:"text",...s,ref:o,onClick:a(()=>D==null?void 0:D("escapeKeyDown"),"onClick")})]}),r.jsx("div",{className:v("content",void 0,_),children:g})]})]})},"DrawerView");try{x.displayName="DrawerView";x.__docgenInfo={"description":"","displayName":"DrawerView","props":{"open":{"defaultValue":null,"description":"If true, initial drawer is open.","name":"open","required":false,"type":{"name":"boolean"}},"onClose":{"defaultValue":null,"description":"","name":"onClose","required":false,"type":{"name":'((reason: "backdropClick" | "escapeKeyDown") => void)'}},"closeButtonRef":{"defaultValue":null,"description":"","name":"closeButtonRef","required":false,"type":{"name":"RefObject<HTMLButtonElement | null>"}},"containerRef":{"defaultValue":null,"description":"","name":"containerRef","required":false,"type":{"name":"RefObject<HTMLDivElement | null>"}},"backdropProps":{"defaultValue":null,"description":"","name":"backdropProps","required":false,"type":{"name":"HTMLAttributes<HTMLDivElement>"}},"onMouseDown":{"defaultValue":null,"description":"","name":"onMouseDown","required":false,"type":{"name":"MouseEventHandler<HTMLDivElement>"}},"ref":{"defaultValue":null,"description":"Imperative ref to open/close.","name":"ref","required":false,"type":{"name":"Ref<DrawerRef>"}},"title":{"defaultValue":null,"description":"A heading/title for the drawer (optional).\nIf provided, View will render it with an <h2> via Headline.","name":"title","required":false,"type":{"name":"string"}},"titleProps":{"defaultValue":null,"description":"","name":"titleProps","required":false,"type":{"name":"HeadlineProps"}},"fullscreen":{"defaultValue":{value:"false"},"description":"If true, drawer takes full screen (height or width depending on anchor).","name":"fullscreen","required":false,"type":{"name":"boolean"}},"anchor":{"defaultValue":{value:"left"},"description":'Which edge to anchor the drawer on.\nDefaults to "left".',"name":"anchor","required":false,"type":{"name":"enum","value":[{"value":'"left"'},{"value":'"right"'},{"value":'"top"'},{"value":'"bottom"'}]}},"closeOnBackdropClick":{"defaultValue":null,"description":"Control whether clicking on the backdrop closes the drawer.\nDefaults to true.","name":"closeOnBackdropClick","required":false,"type":{"name":"boolean"}},"closeButtonProps":{"defaultValue":null,"description":"Option overwrittes for the close button","name":"closeButtonProps","required":false,"type":{"name":"ButtonProps"}},"onChange":{"defaultValue":null,"description":"Callback when open‐state changes. Receives (event, reason).","name":"onChange","required":false,"type":{"name":"((event: unknown, reason: DrawerChangeReason) => void)"}},"renderHeader":{"defaultValue":null,"description":"Optional custom header component. If omitted, View renders a simple\nH2 + close‐button if `title` is provided.","name":"renderHeader","required":false,"type":{"name":"(() => ReactNode)"}},"className":{"defaultValue":null,"description":"Extra CSS class for the outermost <div> (backdrop + wrapper).","name":"className","required":false,"type":{"name":"string"}},"containerClassName":{"defaultValue":null,"description":"Extra CSS class for the inner container (sliding panel).","name":"containerClassName","required":false,"type":{"name":"string"}},"children":{"defaultValue":null,"description":"Anything you want rendered inside the drawer body.","name":"children","required":false,"type":{"name":"ReactNode"}}}}}catch(e){}function G(e){if(!Boolean(e.open))return null;return r.jsx(x,{...e})}a(G,"DrawerServer");try{Drawerserver.displayName="Drawerserver";Drawerserver.__docgenInfo={"description":"RSC entry: purely static server render.\nIt will render exactly the same markup (backdrop + container),\nbut no interactive logic (focus‐trap, key events).","displayName":"Drawerserver","props":{"ref":{"defaultValue":null,"description":"Imperative ref to open/close.","name":"ref","required":false,"type":{"name":"Ref<DrawerRef>"}},"open":{"defaultValue":null,"description":"If true, initial drawer is open.","name":"open","required":false,"type":{"name":"boolean"}},"title":{"defaultValue":null,"description":"A heading/title for the drawer (optional).\nIf provided, View will render it with an <h2> via Headline.","name":"title","required":false,"type":{"name":"string"}},"titleProps":{"defaultValue":null,"description":"","name":"titleProps","required":false,"type":{"name":"HeadlineProps"}},"fullscreen":{"defaultValue":null,"description":"If true, drawer takes full screen (height or width depending on anchor).","name":"fullscreen","required":false,"type":{"name":"boolean"}},"anchor":{"defaultValue":null,"description":'Which edge to anchor the drawer on.\nDefaults to "left".',"name":"anchor","required":false,"type":{"name":"enum","value":[{"value":'"left"'},{"value":'"right"'},{"value":'"top"'},{"value":'"bottom"'}]}},"closeOnBackdropClick":{"defaultValue":null,"description":"Control whether clicking on the backdrop closes the drawer.\nDefaults to true.","name":"closeOnBackdropClick","required":false,"type":{"name":"boolean"}},"closeButtonProps":{"defaultValue":null,"description":"Option overwrittes for the close button","name":"closeButtonProps","required":false,"type":{"name":"ButtonProps"}},"onChange":{"defaultValue":null,"description":"Callback when open‐state changes. Receives (event, reason).","name":"onChange","required":false,"type":{"name":"((event: unknown, reason: DrawerChangeReason) => void)"}},"renderHeader":{"defaultValue":null,"description":"Optional custom header component. If omitted, View renders a simple\nH2 + close‐button if `title` is provided.","name":"renderHeader","required":false,"type":{"name":"(() => ReactNode)"}},"className":{"defaultValue":null,"description":"Extra CSS class for the outermost <div> (backdrop + wrapper).","name":"className","required":false,"type":{"name":"string"}},"containerClassName":{"defaultValue":null,"description":"Extra CSS class for the inner container (sliding panel).","name":"containerClassName","required":false,"type":{"name":"string"}},"children":{"defaultValue":null,"description":"Anything you want rendered inside the drawer body.","name":"children","required":false,"type":{"name":"ReactNode"}}}}}catch(e){}const y=J({name:"Drawer",Server:G,loadLazy:a(()=>$(()=>import("./Drawer.lazy-C_ACV_2j.js"),true?__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]):void 0,import.meta.url),"loadLazy")});try{y.displayName="Drawer";y.__docgenInfo={"description":"The “Island” entrypoint.  Consumers import this file:\n\n   import { Drawer } from '@/components/drawer'\n\nand use <Drawer open={...} ...>...</Drawer> in their JSX.","displayName":"Drawer","props":{}}}catch(e){}try{ComponentType.displayName="ComponentType";ComponentType.__docgenInfo={"description":"Represents any user-defined component, either as a function or a class.\n\nSimilar to {@link JSXElementConstructor}, but with extra properties like\n{@link FunctionComponent.defaultProps defaultProps }.","displayName":"ComponentType","props":{}}}catch(e){}const Q={title:"prokodo/common/Drawer",component:y,parameters:{layout:"fullscreen"},tags:["autodocs"],argTypes:{anchor:{control:{type:"inline-radio"},options:["left","right","top","bottom"],defaultValue:"left"},fullscreen:{control:"boolean",defaultValue:false},closeOnBackdropClick:{control:"boolean",defaultValue:true},onChange:{action:"onChange"},open:{control:"boolean"},containerClassName:{control:"text"},className:{control:"text"},renderHeader:{table:{disable:true}},children:{table:{disable:true}}}};const O=a(e=>r.jsx("div",{style:{position:"absolute",left:"50%",top:"50%",transform:"translate(-50%, -50%)"},children:e}),"renderContainer");const Z=a(e=>{const[l,t]=c.useState(Boolean(e.open));c.useEffect(()=>{t(Boolean(e.open))},[e.open]);const i=a((p,n)=>{var o;t(false);(o=e.onChange)==null?void 0:o.call(e,p,n)},"handleChange");return r.jsxs(c.Fragment,{children:[O(r.jsx(f,{title:"Open Drawer",onClick:a(()=>t(true),"onClick")})),r.jsx(y,{...e,open:l,onChange:i,children:r.jsxs("div",{style:{padding:"1rem"},children:[r.jsx("h3",{children:"Drawer Content"}),r.jsxs("p",{children:["Adjust ",r.jsx("strong",{children:"Anchor"})," and ",r.jsx("strong",{children:"Fullscreen"})," in the controls to see different behaviors."]}),r.jsx(f,{title:"Close Drawer",onClick:a(()=>t(false),"onClick")})]})})]})},"DrawerControlled");const m={args:{open:false,anchor:"left",fullscreen:false,closeOnBackdropClick:true},render:a(e=>r.jsx(Z,{...e}),"render")};const h={args:{open:true,anchor:"top",fullscreen:true,closeOnBackdropClick:true},render:a(e=>{const[l,t]=c.useState(Boolean(e.open));c.useEffect(()=>{t(Boolean(e.open))},[e.open]);const i=a((p,n)=>{var o;t(false);(o=e.onChange)==null?void 0:o.call(e,p,n)},"handleChange");return r.jsxs(c.Fragment,{children:[O(r.jsx(f,{title:"Toggle Fullscreen Top Drawer",onClick:a(()=>t(true),"onClick")})),r.jsx(y,{...e,anchor:"top",fullscreen:true,open:l,onChange:i,children:r.jsxs("div",{style:{padding:"2rem"},children:[r.jsx("h2",{children:"Fullscreen Top Drawer"}),r.jsxs("p",{children:["This drawer is ",r.jsx("code",{children:"fullscreen"})," and anchored at"," ",r.jsx("code",{children:"top"}),"."]}),r.jsx(f,{title:"Close",onClick:a(()=>t(false),"onClick")})]})})]})},"render")};const w={args:{open:false,anchor:"right",fullscreen:false,closeOnBackdropClick:false},render:a(e=>{const[l,t]=c.useState(Boolean(e.open));c.useEffect(()=>{t(Boolean(e.open))},[e.open]);const i=a((p,n)=>{var o;t(false);(o=e.onChange)==null?void 0:o.call(e,p,n)},"handleChange");return r.jsxs(c.Fragment,{children:[O(r.jsx(f,{title:"Open Right Drawer",onClick:a(()=>t(true),"onClick")})),r.jsx(y,{...e,anchor:"right",closeOnBackdropClick:false,fullscreen:false,open:l,onChange:i,children:r.jsxs("div",{style:{padding:"1rem"},children:[r.jsx("h3",{children:"Right Drawer (Backdrop Disabled)"}),r.jsx("p",{children:"Use the header “×” or the button below to close."}),r.jsx(f,{title:"Close",onClick:a(()=>t(false),"onClick")})]})})]})},"render")};var B,j,q,E,I;m.parameters={...m.parameters,docs:{...(B=m.parameters)==null?void 0:B.docs,source:{originalSource:'{\n  args: {\n    open: false,\n    anchor: "left",\n    fullscreen: false,\n    closeOnBackdropClick: true\n  },\n  render: args => <DrawerControlled {...args} />\n}',...(q=(j=m.parameters)==null?void 0:j.docs)==null?void 0:q.source},description:{story:"1) Default: left, non-fullscreen, backdrop closes",...(I=(E=m.parameters)==null?void 0:E.docs)==null?void 0:I.description}}};var S,N,T,P,H;h.parameters={...h.parameters,docs:{...(S=h.parameters)==null?void 0:S.docs,source:{originalSource:'{\n  args: {\n    open: true,\n    anchor: "top",\n    fullscreen: true,\n    closeOnBackdropClick: true\n  },\n  render: args => {\n    const [isOpen, setIsOpen] = useState<boolean>(Boolean(args.open));\n    useEffect(() => {\n      setIsOpen(Boolean(args.open));\n    }, [args.open]);\n    const handleChange = (e: unknown, reason: DrawerChangeReason) => {\n      setIsOpen(false);\n      args.onChange?.(e, reason);\n    };\n    return <Fragment>\n        {renderContainer(<Button title="Toggle Fullscreen Top Drawer" onClick={() => setIsOpen(true)} />)}\n        <Drawer {...args} anchor="top" fullscreen open={isOpen} onChange={handleChange}>\n          <div style={{\n          padding: "2rem"\n        }}>\n            <h2>Fullscreen Top Drawer</h2>\n            <p>\n              This drawer is <code>fullscreen</code> and anchored at{" "}\n              <code>top</code>.\n            </p>\n            <Button title="Close" onClick={() => setIsOpen(false)} />\n          </div>\n        </Drawer>\n      </Fragment>;\n  }\n}',...(T=(N=h.parameters)==null?void 0:N.docs)==null?void 0:T.source},description:{story:"2) FullscreenTop: fullscreen from top",...(H=(P=h.parameters)==null?void 0:P.docs)==null?void 0:H.description}}};var R,F,A,L,M;w.parameters={...w.parameters,docs:{...(R=w.parameters)==null?void 0:R.docs,source:{originalSource:'{\n  args: {\n    open: false,\n    anchor: "right",\n    fullscreen: false,\n    closeOnBackdropClick: false\n  },\n  render: args => {\n    const [isOpen, setIsOpen] = useState<boolean>(Boolean(args.open));\n    useEffect(() => {\n      setIsOpen(Boolean(args.open));\n    }, [args.open]);\n    const handleChange = (e: unknown, reason: DrawerChangeReason) => {\n      setIsOpen(false);\n      args.onChange?.(e, reason);\n    };\n    return <Fragment>\n        {renderContainer(<Button title="Open Right Drawer" onClick={() => setIsOpen(true)} />)}\n        <Drawer {...args} anchor="right" closeOnBackdropClick={false} fullscreen={false} open={isOpen} onChange={handleChange}>\n          <div style={{\n          padding: "1rem"\n        }}>\n            <h3>Right Drawer (Backdrop Disabled)</h3>\n            <p>Use the header “×” or the button below to close.</p>\n            <Button title="Close" onClick={() => setIsOpen(false)} />\n          </div>\n        </Drawer>\n      </Fragment>;\n  }\n}',...(A=(F=w.parameters)==null?void 0:F.docs)==null?void 0:A.source},description:{story:"3) Right, non-fullscreen, backdrop disabled",...(M=(L=w.parameters)==null?void 0:L.docs)==null?void 0:M.description}}};const ee=["Default","FullscreenTop","RightDisabledBackdrop"];const ce=Object.freeze(Object.defineProperty({__proto__:null,Default:m,FullscreenTop:h,RightDisabledBackdrop:w,__namedExportsOrder:ee,default:Q},Symbol.toStringTag,{value:"Module"}));export{x as D,G as a,ce as b};
