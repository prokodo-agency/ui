const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./Slider.lazy-D13sPrvm.js","./createLazyWrapper-AC75M60Y.js","./jsx-runtime-CGXnEs--.js","./index-DGnhqvo7.js","./_commonjsHelpers-DRKe4gOT.js","./iframe-BCusfLZV.js","./createIsland-fzL0F2Ul.js","./Label-BmAeSxLe.js","./bem-DSWMYwqE.js","./Label-CNet2-GF.css","./validations-hwxYw-LN.js"])))=>i.map(i=>d[i]);
var I=Object.defineProperty;var i=(o,n)=>I(o,"name",{value:n,configurable:true});import{_ as C}from"./iframe-BCusfLZV.js";import{c as w}from"./createIsland-fzL0F2Ul.js";import{j as r}from"./jsx-runtime-CGXnEs--.js";import{L as T}from"./Label-BmAeSxLe.js";import{c as x}from"./bem-DSWMYwqE.js";import{i as F}from"./validations-hwxYw-LN.js";const M={"prokodo-Slider":"prokodo-Slider","prokodo-Slider__label":"prokodo-Slider__label","prokodo-Slider__label--is-hidden":"prokodo-Slider__label--is-hidden","prokodo-Slider__root":"prokodo-Slider__root","prokodo-Slider__root--disabled":"prokodo-Slider__root--disabled","prokodo-Slider__rail":"prokodo-Slider__rail","prokodo-Slider__track":"prokodo-Slider__track","prokodo-Slider__mark":"prokodo-Slider__mark","prokodo-Slider__mark__label":"prokodo-Slider__mark__label","prokodo-Slider__input":"prokodo-Slider__input","prokodo-Slider__thumb":"prokodo-Slider__thumb","prokodo-Slider__thumb--focused":"prokodo-Slider__thumb--focused","prokodo-Slider__valueText":"prokodo-Slider__valueText"};const t=x(M,"Slider");const b=i(({id:o,label:n,hideLabel:p,labelProps:m={},required:k,disabled:d,min:l=0,max:a=100,step:c=1,marks:f=false,valueLabelProps:q={},className:S,internalValue:u,isFocused:_,onFocusInternal:g,onBlurInternal:V,onChangeInternal:E})=>{var y;const L=u<l?l:u>a?a:u;const v=a>l?(L-l)/(a-l)*100:0;let h=[];if(Array.isArray(f)){h=f}else if(f===true){const e=[];if(c>0){for(let s=l;s<=a;s+=c){e.push({value:s})}if(e.length===0||((y=e==null?void 0:e[(e==null?void 0:e.length)-1])==null?void 0:y.value)!==a){e.push({value:a})}}h=e}return r.jsxs("div",{className:t(void 0,void 0,S),children:[F(n)&&r.jsx(T,{...m,htmlFor:o,label:n,required:k,className:t("label",{"is-hidden":Boolean(p)})}),r.jsxs("div",{className:t("root",{disabled:Boolean(d)}),children:[r.jsx("div",{className:t("rail")}),r.jsx("div",{className:t("track"),style:{width:`${v}%`}}),h.map(e=>{const s=a>l?((e.value<l?l:e.value>a?a:e.value)-l)/(a-l)*100:0;return r.jsx("div",{"aria-hidden":"true",className:t("mark"),style:{left:`${s}%`},children:typeof e.label==="string"?r.jsx("span",{className:t("mark__label"),children:e.label}):null},e.value)}),r.jsx("input",{"aria-disabled":Boolean(d)||void 0,"aria-label":n,"aria-valuemax":a,"aria-valuemin":l,"aria-valuenow":u,"aria-valuetext":String(u),className:t("input"),disabled:d,id:o,max:a,min:l,step:c,type:"range",value:u,onBlur:V,onChange:E,onFocus:g}),!Boolean(d)&&r.jsx("span",{...q,className:t("valueText",{focused:_}),style:{left:`${v}%`,transform:"translateX(-50%)"},children:u}),r.jsx("div",{className:t("thumb",{focused:_}),style:{left:`${v}%`}})]})]})},"SliderView");try{b.displayName="SliderView";b.__docgenInfo={"description":"","displayName":"SliderView","props":{"internalValue":{"defaultValue":null,"description":"Internal controlled numeric value","name":"internalValue","required":true,"type":{"name":"number"}},"isFocused":{"defaultValue":null,"description":"Whether the input is currently focused","name":"isFocused","required":true,"type":{"name":"boolean"}},"onFocusInternal":{"defaultValue":null,"description":"Focus handler","name":"onFocusInternal","required":true,"type":{"name":"(e: FocusEvent<HTMLInputElement, Element>) => void"}},"onBlurInternal":{"defaultValue":null,"description":"Blur handler","name":"onBlurInternal","required":true,"type":{"name":"(e: FocusEvent<HTMLInputElement, Element>) => void"}},"onChangeInternal":{"defaultValue":null,"description":"Change handler","name":"onChangeInternal","required":true,"type":{"name":"(e: ChangeEvent<HTMLInputElement>) => void"}},"id":{"defaultValue":null,"description":"Unique identifier (also used for label htmlFor)","name":"id","required":true,"type":{"name":"string"}},"value":{"defaultValue":null,"description":"Current value (controlled)","name":"value","required":false,"type":{"name":"string | number"}},"min":{"defaultValue":{value:"0"},"description":"Minimum value (default: 0)","name":"min","required":false,"type":{"name":"number"}},"max":{"defaultValue":{value:"100"},"description":"Maximum value (default: 100)","name":"max","required":false,"type":{"name":"number"}},"step":{"defaultValue":{value:"1"},"description":"Step increment (default: 1)","name":"step","required":false,"type":{"name":"number"}},"name":{"defaultValue":null,"description":"","name":"name","required":false,"type":{"name":"string"}},"errorText":{"defaultValue":null,"description":"Custom error message","name":"errorText","required":false,"type":{"name":"string"}},"helperText":{"defaultValue":null,"description":"Custom helper message","name":"helperText","required":false,"type":{"name":"string"}},"marks":{"defaultValue":{value:"false"},"description":"If true, show tick marks at each step (unstyled; view will position them).\nOr supply an array of `{ value, label? }` to render custom marks.","name":"marks","required":false,"type":{"name":"boolean | SliderMark[]"}},"label":{"defaultValue":null,"description":"Label text (renders above the slider)","name":"label","required":false,"type":{"name":"string"}},"hideLabel":{"defaultValue":null,"description":"Hide label","name":"hideLabel","required":false,"type":{"name":"boolean"}},"labelProps":{"defaultValue":{value:"{}"},"description":"Props forwarded to the Label component","name":"labelProps","required":false,"type":{"name":'Omit<LabelProps, "error" | "required" | "label" | "htmlFor">'}},"valueLabelProps":{"defaultValue":{value:"{}"},"description":"Props forwarded to the floating value tooltip <span>","name":"valueLabelProps","required":false,"type":{"name":"HTMLAttributes<HTMLSpanElement>"}},"required":{"defaultValue":null,"description":"If true, renders *— Required —* on the label","name":"required","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":null,"description":"Disable the slider entirely","name":"disabled","required":false,"type":{"name":"boolean"}},"onFocus":{"defaultValue":null,"description":"Called when slider gains focus","name":"onFocus","required":false,"type":{"name":"((e: FocusEvent<HTMLInputElement, Element>) => void)"}},"onBlur":{"defaultValue":null,"description":"Called when slider loses focus","name":"onBlur","required":false,"type":{"name":"((e: FocusEvent<HTMLInputElement, Element>) => void)"}},"onChange":{"defaultValue":null,"description":"Called whenever the value changes.\nSignature: (e: ChangeEvent<HTMLInputElement>, newValue: number) => void","name":"onChange","required":false,"type":{"name":"((e: ChangeEvent<HTMLInputElement>, value: number) => void)"}},"className":{"defaultValue":null,"description":"Optional additional CSS class on the root container","name":"className","required":false,"type":{"name":"string"}},"snap":{"defaultValue":null,"description":'How the thumb snaps when the user drags it.\n- "none": free value (default)\n- "step": snap to multiples of `step`\n- "marks": snap to nearest mark value (from `marks` array or implicit step marks)',"name":"snap","required":false,"type":{"name":"enum","value":[{"value":'"none"'},{"value":'"step"'},{"value":'"marks"'}]}}}}}catch(o){}function H(o){const{value:n,min:p=0}=o;const m=typeof n==="number"?n:typeof n==="string"?Number(n):p;return r.jsx(b,{...o,internalValue:m,isFocused:false,onBlurInternal:i(()=>void 0,"onBlurInternal"),onChangeInternal:i(()=>void 0,"onChangeInternal"),onFocusInternal:i(()=>void 0,"onFocusInternal")})}i(H,"SliderServer");try{Sliderserver.displayName="Sliderserver";Sliderserver.__docgenInfo={"description":"","displayName":"Sliderserver","props":{"id":{"defaultValue":null,"description":"Unique identifier (also used for label htmlFor)","name":"id","required":true,"type":{"name":"string"}},"value":{"defaultValue":null,"description":"Current value (controlled)","name":"value","required":false,"type":{"name":"string | number"}},"min":{"defaultValue":null,"description":"Minimum value (default: 0)","name":"min","required":false,"type":{"name":"number"}},"max":{"defaultValue":null,"description":"Maximum value (default: 100)","name":"max","required":false,"type":{"name":"number"}},"step":{"defaultValue":null,"description":"Step increment (default: 1)","name":"step","required":false,"type":{"name":"number"}},"name":{"defaultValue":null,"description":"","name":"name","required":false,"type":{"name":"string"}},"errorText":{"defaultValue":null,"description":"Custom error message","name":"errorText","required":false,"type":{"name":"string"}},"helperText":{"defaultValue":null,"description":"Custom helper message","name":"helperText","required":false,"type":{"name":"string"}},"marks":{"defaultValue":null,"description":"If true, show tick marks at each step (unstyled; view will position them).\nOr supply an array of `{ value, label? }` to render custom marks.","name":"marks","required":false,"type":{"name":"boolean | SliderMark[]"}},"label":{"defaultValue":null,"description":"Label text (renders above the slider)","name":"label","required":false,"type":{"name":"string"}},"hideLabel":{"defaultValue":null,"description":"Hide label","name":"hideLabel","required":false,"type":{"name":"boolean"}},"labelProps":{"defaultValue":null,"description":"Props forwarded to the Label component","name":"labelProps","required":false,"type":{"name":'Omit<LabelProps, "error" | "required" | "label" | "htmlFor">'}},"valueLabelProps":{"defaultValue":null,"description":"Props forwarded to the floating value tooltip <span>","name":"valueLabelProps","required":false,"type":{"name":"HTMLAttributes<HTMLSpanElement>"}},"required":{"defaultValue":null,"description":"If true, renders *— Required —* on the label","name":"required","required":false,"type":{"name":"boolean"}},"disabled":{"defaultValue":null,"description":"Disable the slider entirely","name":"disabled","required":false,"type":{"name":"boolean"}},"onFocus":{"defaultValue":null,"description":"Called when slider gains focus","name":"onFocus","required":false,"type":{"name":"((e: FocusEvent<HTMLInputElement, Element>) => void)"}},"onBlur":{"defaultValue":null,"description":"Called when slider loses focus","name":"onBlur","required":false,"type":{"name":"((e: FocusEvent<HTMLInputElement, Element>) => void)"}},"onChange":{"defaultValue":null,"description":"Called whenever the value changes.\nSignature: (e: ChangeEvent<HTMLInputElement>, newValue: number) => void","name":"onChange","required":false,"type":{"name":"((e: ChangeEvent<HTMLInputElement>, value: number) => void)"}},"className":{"defaultValue":null,"description":"Optional additional CSS class on the root container","name":"className","required":false,"type":{"name":"string"}},"snap":{"defaultValue":null,"description":'How the thumb snaps when the user drags it.\n- "none": free value (default)\n- "step": snap to multiples of `step`\n- "marks": snap to nearest mark value (from `marks` array or implicit step marks)',"name":"snap","required":false,"type":{"name":"enum","value":[{"value":'"none"'},{"value":'"step"'},{"value":'"marks"'}]}}}}}catch(o){}const $=w({name:"Slider",Server:H,loadLazy:i(()=>C(()=>import("./Slider.lazy-D13sPrvm.js"),true?__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10]):void 0,import.meta.url),"loadLazy")});export{$ as S,b as a,H as b};
